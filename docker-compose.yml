services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  alembic:
    image: python:3.11-slim
    working_dir: /app/consumer
    volumes:
      - .:/app
    command: >
      sh -c "pip install alembic sqlalchemy psycopg2-binary &&
             alembic revision --autogenerate -m \"Make migrations\" &&
             alembic upgrade head"
    depends_on:
      postgres:
        condition: service_started

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5

  producer:
    build: 
      context: .
      dockerfile: producer/Dockerfile
    ports:
      - "8000:8000"
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: 5672
      SECRET_KEY: "${SECRET_KEY}"
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
    command: uvicorn producer.main:app --host 0.0.0.0 --port 8000 --reload

  consumer:
    build:
      context: .
      dockerfile: consumer/Dockerfile
    ports:
      - "8080:8080"
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: 5672
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
    restart: unless-stopped

volumes:
  postgres_data: 